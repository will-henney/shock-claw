* DONE Installing and testing PyClaw
CLOSED: [2024-12-05 Thu 11:50]
:LOGBOOK:
- State "TODO"       from              [2024-12-03 Tue 23:21] \\
  Hoping that I can investigate radiative shocks with this
:END:
** How I am managing python and dependencies
- Rather than doing ~uv init~ and then using ~uv add~ as I have in other projects, this time I am going to try the ~uv pip~ and ~uv venv~ interface, which is not so project-based (for instance, there is no pyproject.toml)
- Use the ~uv venv~ to make a virtual environment in the current directory
  - This can be activated with ~source .venv/bin/activate~, but that is not necessarily required because ...
  - ... I can use ~uv run~ within the project folder and it will use the environment automatically 
- Install dependencies with ~uv pip~ and they go into the virtual env
** Installation
1. Installed all the dependencies and the basic pyclaw package
   - In principal, this is all that is necessary for using the python interface, but I have carried on with other steps, so I have all the examples and source files available
2. Cloned the git repo in [[file:../clawpack_src/]]
   - Activated all the submodules
3. Ran the tests in the [[file:../clawpack_src/pyclaw/examples/]] folder
   #+begin_src sh
     nosetests -v
   #+end_src
   - This passed all but one of the tests
     #+begin_example
       ======================================================================
       FAIL: examples.advection_1d_variable.test_variable_coefficient_advection.TestAdvectionVarCoeff1D.test_sharpclaw_custom_time_integrator
       ----------------------------------------------------------------------
       Traceback (most recent call last):
         File "/Users/will/Dropbox/pyclaw-test/.venv/lib/python3.12/site-packages/nose/case.py", line 170, in runTest
           self.test(*self.arg)
         File "/Users/will/Dropbox/clawpack_src/pyclaw/examples/advection_1d_variable/test_variable_coefficient_advection.py", line 50, in test_sharpclaw_custom_time_integrator
           assert error(test_name='sharpclaw_custom_time_integrator_'+rk_name,kernel_language='Fortran',solver_type='sharpclaw',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       AssertionError: Failed for SSP33

       ----------------------------------------------------------------------
       Ran 65 tests in 51.095s

       FAILED (failures=1)
     #+end_example

4. Cloned the applications repository
   #+begin_src sh
     git clone --recursive https://github.com/clawpack/apps
   #+end_src
   - This has some example notebooks among other stuff
** Test the installation and the examples
*** DONE Trying sample scripts
CLOSED: [2024-12-04 Wed 18:34]
- I tried the first example given in the [[https://www.clawpack.org/first_run_pyclaw.html#first-run-pyclaw][help pages]] for the IPython interpreter using ~uv run jupyter console~
  - This seems to work, but the plotting routines are a bit broken.
- I manage to get some images, but there was an error because it was trying to use ~string.zfill~, which has not been a thing since Python 2. It should be a method on the ~str~ objects now.s
*** DONE Trying sample notebook
CLOSED: [2024-12-04 Wed 18:34]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-12-04 Wed 18:34] \\
  So I did this, but it is not really that relevant to what I want to do since it is mainly faffing around with 3d visualization, whereas all I need is 1d for now
:END:
- First one I found was from ~euler_3d~ but that requires the simulation to be run first
- So I am doing that now, but I think it will take a while. It is taking 2.5 minutes per timestep, and it needs to do 10 of them
- Now running notebook
  - I had to add ~file_prefix="claw"~ when loading the solution
  - I had to make loads of other modifications to the yt functions to get it to work
  - But I did manage to make cut plane plots
  - And also to do a 3d plot of an isosurface of density, but colored with the energy
  - Although I failed to get interactive plots to work in the notebook
*** DONE Trying the notebooks in the Riemann Book repo
CLOSED: [2024-12-05 Thu 11:47]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-12-05 Thu 11:47] \\
  Now I have successfully run all the notebooks from this book. Now I need to work out how to modify things for the radiative shocks
- State "TODO"       from              [2024-12-04 Wed 18:36] \\
  I looked at the notebooks in the app repo, but it said they were non-functional and I should look at these instead
:END:
- https://github.com/clawpack/riemann_book
- This is a whole thing with its own instructions, so I am using a separate venv
  - Done ~uv venv~ in ~~/Dropbox/clawpack_src/riemann_book~
  - Then ~uv pip install ...~ everything given in the Installation section of the README file
- Note that it was necessary to pin the notebook version to 6, because the current version of the notebook does not work with the extensions
  - ~uv pip install notebook==6.4.6~
- Log of the install
  #+begin_src sh :dir ../clawpack_riemann_book
    uv venv
    uv pip install -r requirements.txt
    uv pip install clawpack
    uv pip install "notebook<7"
    uv run jupyter nbextension enable --py widgetsnbextension
    uv pip install jupyter_contrib_nbextensions
    uv run jupyter contrib nbextension install --user
    uv run jupyter nbextension enable equation-numbering/main
    uv run python test.py
    uv pip install seaborn
    uv pip install JSAnimation
    ls *.ipynb
    uv run python test-remaining.py
  #+end_src
- I installed JSAnimation to quieten a warning
- I installed seaborn in an attempt to stop two of the notebooks from crashing, but it did not help
- All the other notebooks ran fine with ~test.py~ and ~test-remaining.py~
  - These use ~nbconvert~ to run each notebook
  - The latter is my own version that skips all the ones that have already been tried
- Note that there is also a docker image that you can install, which may have been easier, but I have it all working now
-
- 
**** Running notebooks by hand
- These all worked, except for the kitchen sink one, which has problems with the javascript animations
- The ~FV_compare~ one is going to be the most useful for modifying to my own purposes
- I managed to get round the seaborn crashes by changing the line from
  : plt.style.use('seaborn-talk')
  to 
  : plt.style.use('seaborn-v0_8-talk')
- But the ~Kitchen_sink_proplem.ipynb~ one required changing all
  : HTML(anim.to_jshtml())
  to just
  : anim
  and then everything worked

**** Stuff that did not work - ignore this section, except as a lesson
- *No, this is the wrong track. Better to pin to version 6*
- However, it is all dependent on the old version of jupyter notebooks, which you /can/ still use, but it requires installing ~nbclassic~ and the commands are a bit different
  - First install the classic notebook
    : uv pip install nbclassic
  - Then enable the extension (replacing ~jupyter nbextension enable --py widgetsnbextension~)
    : uv run jupyter nbclassic extension enable --py widgetsnbextension
* Using PyClaw for radiative shocks
** Learn the terminology used by PyClaw
- Domain :: Convenience object for uniform rectangular grids
- Gauge :: What are these?
- Patch ::
- Solution :: 
- State :: The current state on a particular patch
  : including the unknowns q, the time t, and the auxiliary coefficients aux
** TODO How to set up a problem
*** DONE Marimo notebook of demo problem
CLOSED: [2024-12-06 Fri 12:58]
- [[file:tutorial/pyclaw tutorial.py]]
  - This works well to set up an acoustics problem and display the results using matplotlib
  - I have combined it with the marimo ui elements to allow choosing the timestep with a number picker and the plots update automatically 
*** DONE Marimo notebook of a shock tube problem
CLOSED: [2024-12-07 Sat 09:56]
- Now, we want to do the same but for the Euler equations with a shock
- This is in [[file:shock-test/shock-tube-marimo.py]]
- It does the classic Sod shock tube problem between two initially static states with different pressures and densities
- I have set it up to use the python version of Roe solver and it works great
- I have used marimo UI elements to allow stepping through the output times of a given solution, and also to change the value of gamma
  - Changing gamma causes the simulation to re-run, but this only takes a second or so
*** DONE Marimo notebook of colliding streams
CLOSED: [2024-12-07 Sat 11:45]
- [[file:shock-test/stream-collide-marimo.py]]
- This will be closer to being useful for me for simulating radiative shocks
- I will start off with identical pressure, density, abs(velocity) in each half, but with velocity sign reversed so that they converge on mid-plane
- This seems to work fine
  - The velocity goes to zero immediately at the shock, which means that we do not have any pressure gradients in the stagnation shell
  - The shock propagates outward, so it is not so easy to know what the upstream Mach number in the shock frame is
- For a high inflow velocity (10 in code units, which I think is in units of isothermal sound speed), we get compression of nearly 4 in the gamma = 5/3 case, and compression of nearly 100 in the gamma = 1.001 case.
** Choosing the Riemann solver to use
- There are fortran and python versions of most of the solvers
- To start with, I am only interested in the 1-dimensional ones
- The fortran ones are in [[file:../clawpack_src/riemann/src]]
  - ~rp1_euler_with_efix.f90~ has the Roe solver
    (with entropy fix for transonic rarefaction waves)
  - ~rp1_euler_hlle.f90~ has the HLLE solver
  - ~rp1_mhd_roe.f90~ has an mhd solver
    - note that this has x, y, z components of momentum and B field, even though it is in 1 dimension
- The python ones are in [[file:../clawpack_src/riemann/riemann]]
  - ~euler_1D_py.py~ has a Roe solver and HLLC solver, but no exact solver
  - ~euler_with_efix_1D_constants.py~ has constants for the index of the conserved variables (density, momentum, energy) 
- 
** DONE How to add in the cooling
CLOSED: [2024-12-13 Fri 08:24]
- Now I have read the docs, and it is indeed the source function I need to add
  - ~solver.step_source()~ for the classic solvers
  - ~solver.dq_source()~ for the SharpClaw solvers
*** How does ~step_source()~ work?
- I have grepped for it in the pyclaw examples source files
  - In ~advection_reaction.py~, it mutates the state.q to account for the reaction term
  - In ~shock_bubble_interaction.py~, it also mutates the state.q, this time for the geometric source term in cylindrical symmetry
    - It used a two-step second order runge-kutta method, where it takes a half timestep of the source term to get intermediate states, and then uses these to get to recalculate the source term to apply over the whole time step
- So that is pretty definitive - we need to mutate the state.q values to account for the source terms applied over the timestep
*** Converting between code units and physical units
- The Riemann solver uses the following conservation variables:
  - Density: g/cm^3
  - Momentum density: g/cm^2/s
  - Energy density: erg/cm^3 or g/cm/s^2
- But we can replace the second two with primitive variables:
  - Velocity: cm/s
  - Pressure: erg/cm^3 or g/cm/s^2
- So for fiducial variables, I need a length, a time and a mass
  - r_*, t_*, m_*
- But I really want to define a fiducial number density (say 100 pcc) and a temperature (say 1e4 K), while the mass can be the mass of a hydrogen atom
  - n_* = r_*^-3, T_*
  - where v_* = r_* / t_* is the sound speed at T = T_*
  - but do we want to use the isothermal sound speed or the adiabatic sound speed? Say the isothermal one for now: v_*^2 = P_* / rho_* = 2 n_* k T_* / m_* n_*
    - v_*^2 = 2 k T_* / m_*
*** How to pass in the parameters of the cooling function?
- This can be done as with the ~gamma~ parameters by using the dict ~state.problem_data~. The parameters we want are:
  - Equilibrium temperature: ~Teq~ (default: 1.0)
  - Cooling timescale (cooling time for rho=1 at T=Teq): ~tcool~
    - (default: 0.1)
    - t_cool = E_int / L where E_int is the internal energy density (q[2] - KE) and L = n^2 * \Lambda(T_eq) = \rho^2 \Lambda(T_eq) / m_H^2
    - E_int = P / (\gamma - 1) = 1.5 P for gamma = 5/3
    - P = \rho a^2 / \gamma = 2 n k T = 2 \rho k T / m_H
    - t_cool = 2 k T_eq m_H / (\gamma - 1) \rho \Lambda(T_eq)
    - But the characteristic t_cool is for \rho = 1, so we have in code units
      - \Lambda(T_eq) = [2 k T_eq m_H / (\gamma - 1)] t_cool^-1
  - Power law slopes (q_C and q_H in the cooling/heating functions)
    - ~cool_slope~ (default: 2.2) \Lambda(T) = \Lambda(T_eq) * (T / T_eq)^{q_C}
    - ~heat_slope~ (default: -1.0) \Gamma(T) = \Gamma(T_eq) * (T / T_eq)^{q_H}
*** DONE Example cooling function
CLOSED: [2024-12-08 Sun 19:53]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-12-08 Sun 19:53] \\
  Done initial version of this, implementing first and second order methods. I still need to test it, and also to add the exact method.
:END:
  #+begin_src python :tangle shock-test/cooling_function.py
    DEFAULTS = {
        "cool_method": "second order",
        "T_eq": 1.0,
        "cool_rate": 1.0,
        # Cooling increases steeply with temperature
        "cool_slope": 2.3,
        # Heating decreases gradually with temperature
        "heat_slope": -0.5,
        # Monatomic ideal gas
        "gamma": 5/3,
        "gamma1": 2/3,
    }



    def cooling_source_term_step(solver, state, dt):
        """Apply radiative heating and cooling over timestep

        For use with classic-type Clawpack solvers, for example:
        
              solver.step_source = cooling_source_term_step

        Heating and cooling are both proportional to density squared, and
        are power-law functions of temperature, with power-law indices
        given by the `cool_slope` and `heat_slope` parameters (all
        parameters can be set via the `state.problem_data` dictionary).
        The equilibrium temperature (where heating = cooling) is given by
        the `T_eq` parameter.  The cooling rate (energy/time) for
        density=1 and temperature=T_eq is given by the `cool_rate`
        parameter.  The cooling method can be either "first order" or
        "second order".,

        Author: William Henney, 2024
        """
        # Attempt to get the cooling parameters from the state, with
        # fallback to the defaults
        cool_method = state.problem_data.get("cool_method", DEFAULTS["cool_method"])
        T_eq = state.problem_data.get("T_eq", DEFAULTS["T_eq"])
        cool_rate = state.problem_data.get("cool_rate", DEFAULTS["cool_rate"])
        cool_slope = state.problem_data.get("cool_slope", DEFAULTS["cool_slope"])
        heat_slope = state.problem_data.get("heat_slope", DEFAULTS["heat_slope"])
        gamma = state.problem_data.get("gamma", DEFAULTS["gamma"])
        gamma1 = state.problem_data.get("gamma1", DEFAULTS["gamma1"])
        
        # Find primitive variables from conserved variables
        density = state.q[0, :]
        velocity = state.q[1, :] / density
        internal_energy = state.q[2, :] - 0.5 * density * velocity**2
        pressure = gamma1 * internal_energy
        temperature = pressure / density

        # Integrate net (heating - cooling) over the timestep
        if cool_method == "first order":
            # Calculate change of energy over timestep (positive for net
            # heating)
            dE = dt * cool_rate * density**2 * (
                (temperature / T_eq) ** heat_slope
                - (temperature / T_eq) ** cool_slope
            )
        elif cool_method == "second order":
            # Take half timestep at constant density
            dE2 = 0.5 * dt * cool_rate * density**2 * (
                 (temperature / T_eq) ** heat_slope
                - (temperature / T_eq) ** cool_slope
            )
            # Recalculate temperature after half timestep
            internal_energy += dE2
            temperature = pressure / density
            # Then take the full timestep
            dE = dt * cool_rate * density**2 * (
                (temperature / T_eq) ** heat_slope
                - (temperature / T_eq) ** cool_slope
            )
        elif cool_method == "exact":
            raise NotImplementedError("Exact cooling is not implemented yet")
        else:
            raise ValueError(f"Unknown cooling method: {cool_method}")
        
        # Modify the energy of the state
        state.q[2, :] += dE

        return None
  #+end_src
*** DONE Test the cooling function in a notebook
CLOSED: [2024-12-10 Tue 19:34]
- This works great. I have line plots of the profiles at a particular time, and also images of the space-time structure
- This is now set up so that I can specify the shock isothermal Mach number and it will calculate the inflow stream velocity to give that Mach number shock once the stagnation shell thickness is larger than the cooling length
  - For earlier times, the shock is a bit stronger because the expansion velocity of the shell is larger
*** DONE Description of results from the shock simulations
CLOSED: [2024-12-13 Fri 08:24]
- A cooling rate of 30 is required to get the Mach numbers to come out right for the low-velocity shocks and quasi-shocks
- For the quasi-shocks (isothermal M_0 = 1 to sqrt(\gamma) \approx 1.3), we see a smooth transition on scale of the cooling length, with T initially rising and then falling
  - The peak T is quite small though, for instance
    |  M_i |   M_a |  T_max |    T_1 |
    |-----+------+-------+-------|
    | 1.1 | 0.85 | 1.013 |       |
    | 1.2 | 0.93 |  1.03 |       |
    | 1.3 | 1.01 |  1.06 | 1.007 |
    | 1.4 | 1.08 |  1.11 |  1.08 |
    | 1.5 | 1.16 |  1.17 |  1.16 |
    |   2 | 1.55 |  1.55 |  1.55 |
    |   3 | 2.32 |   2.5 |   2.5 |
    |     |      |       |       |
#+TBLFM: $2=$1 / sqrt(5/3) ; f2
** TODO Histograms of temperature and differential emission measure
- This is what we need to calculate the variance of the temperature distribution t^2
- And also to calculate the empirical t^2 from the Peimbert formalism
- 
*** Initial results from the DEM calculations
- The DEM curves converge well after the initial incomplete cooling phase
- It works best with a high resolution simulation with 3200 cells
- For the faster shocks, it is best with a cooling rate of 10, which gives a cooling length of about 0.2
  - But for the weaker shocks (M_i < 2), we need a cooling rate of 30 to get the right Mach numbers 
- M = 7 gets up to 1e5 K, so this is the strongest shock we are going to want to use
  - In my [[file:../shock-cloudy/shock-cloudy.org][shock cloudy notes]] I find that 75 km/s model shows a slight ionization from O^+2 to O^+3, which we might have to take into account in these models
- Note that the simulations are all done with an equilibrium  temperature of T = 1, where T = P / \rho in code units
- I fit a simple power law function to the DEM
  - DEM = A (T - T_*)^-m
  - Ideally, T_* would be the equilibrium temperature, but sometimes I need to use a smaller value in order to get a good fit
- For M=7, I get a slope of about m=2, which means that all temperatures contribute equally to the t^2 I guess
- Table of results from intial testing
  |   M | T_max |    A |   T_* |   m | \ell_cool |
  |-----+------+------+------+-----+-------|
  |   7 |   10 |  0.3 | 0.66 |   2 |       |
  |   5 |  5.5 | 0.13 |  0.9 | 1.6 |       |
  |   3 |  2.5 | 0.07 |    1 | 1.2 |  0.22 |
  |   2 | 1.55 | 0.05 |    1 |   1 |  0.25 |
  | 1.5 | 1.18 |    - |    - |   - |   0.4 |
  | 1.2 | 1.04 |    - |    - |   - |   0.5 |
  |     |      |      |      |     |       |
- Cooling distance \ell_cool are for cooling rate of 10
  - The quasi-shock with M_i = 1.2 was actually run with cooling rate of 20 instead of 10, giving \ell_cool = 0.25, but then rescaled to match the others (this was necessary because with 10 it never gets to the asymptotic state before the final time)
- Lower velocity shocks (M \lt 2) are not well represented by power laws. Instead they have a bimodal distribution with a secondary peak at T_max

*** DONE Estimating the isothermal Mach number of the fully-radiative shock
CLOSED: [2024-12-10 Tue 19:41]
- For cases where we cool right down to the equilibrium temperature after the shock, with zero velocity, then the total velocity change across the isothermal shock is equal to the inflow velocity, and should be equal to the isothermal sound speed (1 in code units) times $M_0 - M_0^{-1}$, where $M_0$ is the isothermal Mach number of the shock.
- So M^2 - U M - 1 = 0
- M = 0.5 (U + sqrt(U^2 + 4))
- M = 0.5 U (1 + sqrt(1 + 4/U^2))
- Table
  |    U |      M |   M_ad | \rho_1/\rho_0 |  \rho_2/\rho_0 |  T_1/T_0 |  U_exp | Check |
  |------+--------+-------+--------+---------+--------+-------+-------|
  | 0.01 |  1.005 | 0.778 |  1.000 |   1.010 |  1.000 | 0.995 | 0.995 |
  |  0.1 |  1.051 | 0.814 |  1.000 |   1.105 |  1.000 | 0.951 | 0.951 |
  |  0.2 |  1.105 | 0.856 |  1.000 |   1.221 |  1.000 | 0.905 | 0.905 |
  |  0.3 |  1.161 | 0.899 |  1.000 |   1.348 |  1.000 | 0.861 | 0.861 |
  |  0.4 |  1.220 | 0.945 |  1.000 |   1.488 |  1.000 | 0.820 | 0.820 |
  |  0.5 |  1.281 | 0.992 |  1.000 |   1.641 |  1.000 | 0.781 | 0.781 |
  |  0.6 |  1.344 | 1.041 |  1.061 |   1.806 |  1.041 | 0.744 | 0.744 |
  |  0.7 |  1.409 | 1.091 |  1.136 |   1.985 |  1.089 | 0.709 | 0.710 |
  |  0.8 |  1.477 | 1.144 |  1.215 |   2.182 |  1.141 | 0.677 | 0.677 |
  |  0.9 |  1.547 | 1.198 |  1.294 |   2.393 |  1.193 | 0.647 | 0.646 |
  |  1.0 |  1.618 | 1.253 |  1.374 |   2.618 |  1.246 | 0.618 | 0.618 |
  |  1.5 |  2.000 | 1.549 |  1.778 |   4.000 |  1.547 | 0.500 | 0.500 |
  |  2.0 |  2.414 | 1.870 |  2.153 |   5.827 |  1.914 | 0.414 | 0.414 |
  |  3.0 |  3.303 | 2.558 |  2.743 |  10.910 |  2.891 | 0.303 | 0.303 |
  |  5.0 |  5.193 | 4.022 |  3.374 |  26.967 |  5.919 | 0.193 | 0.193 |
  | 10.0 | 10.099 | 7.823 |  3.813 | 101.990 | 19.997 | 0.099 | 0.099 |
  #+TBLFM: $2=0.5 ($1 + sqrt($1**2 + 4));f3::$3=$2/sqrt(5/3);f3::$4=$3<1?1.0:4 $3**2 / ($3**2 + 3);f3::$5=$2**2;f3::$6=$3<1?1.0:(1/16) (5 $3**2 - 1) (1 + 3/$3**2);f3::$7=$2 - $1;f3::$8=$2/$5;f3

  
*** Earlier investigations
- I have been looking at the source code in [[file:../clawpack_src/pyclaw/src/pyclaw/]] and it looks like it might be easy
- There is a function in [[file:../clawpack_src/pyclaw/src/pyclaw/solver.py::def before_step(solver,solution):][solver.py]] called ~before_step~ that is called before each time step
  - This is where I should put the cooling function
  - In the ~evolve_to_time()~ function it is called as
    #+begin_src python
                  if self.before_step is not None:
                      self.before_step(self, solution.states[0])
    #+end_src
    - So it has access to the base state, which includes all the variables that I need
- On the other hand, the docs mention that source terms are added via a routine called ~src~
  - But this is for the fortran version. I need to check what is the equivalent in pyclaw
** TODO Plotting and animation
- For animation, see [[http://www.clawpack.org/gallery/_static/apps/notebooks/visclaw/animation_tools_demo.html][this page]]
